{"ast":null,"code":"var _jsxFileName = \"C:\\\\ljs\\\\project\\\\id\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport Header from \"./pages/Header\";\nimport Footer from \"./pages/Footer\";\nimport { History } from \"./pages/History\";\nimport { ChatBTN, HelpBTN } from \"./pages/Buttons\";\nimport './App.css';\nimport { Search } from \"./pages/Search\";\nimport IdProject from \"./IdProject.json\";\nimport CreateBlock from \"./pages/CreateBlock\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [account, setAccount] = useState(\"\");\n  const [contract, setContract] = useState(null);\n  const [blocks, setBlocks] = useState([]); // 블록 상태 관리\n  const [nickName, setNickName] = useState(\"\");\n  const [selectedUser, setSelectedUser] = useState(null); // 선택된 사용자\n\n  useEffect(() => {\n    const initWeb3 = async () => {\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          await window.ethereum.request({\n            method: \"eth_requestAccounts\"\n          });\n          const accounts = await web3.eth.getAccounts();\n          if (accounts.length > 0) {\n            const account = accounts[0];\n            setAccount(account);\n            const networkId = await web3.eth.net.getId();\n            const deployedNetwork = IdProject.networks[networkId];\n            const instance = new web3.eth.Contract(IdProject.abi, deployedNetwork.address);\n            setContract(instance);\n\n            // 계약에서 직접 데이터 불러오기\n            fetchBlocks(instance, account);\n          } else {\n            console.error(\"No accounts found.\");\n          }\n        } catch (error) {\n          console.error(\"Error initializing web3:\", error);\n        }\n      } else {\n        console.error(\"Ethereum object not found. Please install MetaMask.\");\n      }\n    };\n    initWeb3();\n\n    // 새로고침 시 로컬 스토리지에서 blocks 데이터 불러오기\n    const savedBlocks = localStorage.getItem(\"blocks\");\n    if (savedBlocks) {\n      setBlocks(JSON.parse(savedBlocks));\n    }\n  }, []);\n\n  // 블록 정보 가져오기 (스마트 계약에서 실시간으로 블록 데이터 불러오기)\n  const fetchBlocks = async (contract, account) => {\n    try {\n      if (contract && account) {\n        // blockCount는 Bigint로 반환될 수 있으므로, 이를 Bigint로 처리\n        const blockCount = await contract.methods.blockCount().call();\n        console.log(\"blockCount: \", blockCount);\n        if (blockCount === 0n) {\n          console.log(\"No blocks available\");\n          return;\n        }\n      }\n    } catch {}\n  };\n\n  // blocks 상태 업데이트 시 로컬 스토리지에 저장\n  useEffect(() => {\n    if (blocks.length > 0) {\n      localStorage.setItem(\"blocks\", JSON.stringify(blocks));\n    }\n  }, [blocks]);\n  useEffect(() => {\n    // 페이지가 처음 로드될 때 localStorage에서 nickName을 가져옵니다.\n    const storedNickName = localStorage.getItem(\"nickName\");\n    if (storedNickName) {\n      setNickName(storedNickName);\n    } else {\n      // localStorage에 nickName이 없으면 기본값을 사용하거나 사용자에게 설정하게 할 수 있습니다.\n      setNickName(\"\"); // 기본 닉네임 설정\n      localStorage.setItem(\"nickName\", \"\"); // localStorage에 저장\n    }\n  }, []);\n\n  // 정보 가져오기 (블록 리스트 가져오기)\n  const getInfo = async () => {\n    try {\n      if (contract && account) {\n        const blockCount = await contract.methods.blockCount().call();\n        const gotInfos = [];\n        for (let i = 1; i <= blockCount; i++) {\n          const block = await contract.methods.getInfo(account, i).call();\n          gotInfos.push(block);\n        }\n        setBlocks(gotInfos);\n      }\n    } catch (error) {\n      console.error(\"Error getting info:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Welcome, \", nickName, \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Search, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CreateBlock, {\n      contract: contract,\n      account: account,\n      blocks: blocks,\n      setBlocks: setBlocks,\n      getInfo: getInfo // getInfo 함수 전달\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(History, {\n      blocks: blocks // blocks 상태 전달\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatBTN, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HelpBTN, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"RJxaoin4/+vSf5Sm1lgX4LG9YMA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Web3","Header","Footer","History","ChatBTN","HelpBTN","Search","IdProject","CreateBlock","jsxDEV","_jsxDEV","App","_s","account","setAccount","contract","setContract","blocks","setBlocks","nickName","setNickName","selectedUser","setSelectedUser","initWeb3","window","ethereum","web3","request","method","accounts","eth","getAccounts","length","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","fetchBlocks","console","error","savedBlocks","localStorage","getItem","JSON","parse","blockCount","methods","call","log","setItem","stringify","storedNickName","getInfo","gotInfos","i","block","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/ljs/project/id/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport Header from \"./pages/Header\";\nimport Footer from \"./pages/Footer\";\nimport { History } from \"./pages/History\";\nimport { ChatBTN, HelpBTN } from \"./pages/Buttons\";\nimport './App.css';\nimport { Search } from \"./pages/Search\";\nimport IdProject from \"./IdProject.json\";\nimport CreateBlock from \"./pages/CreateBlock\";\n\nconst App = () => {\n  const [account, setAccount] = useState(\"\");\n  const [contract, setContract] = useState(null);\n  const [blocks, setBlocks] = useState([]); // 블록 상태 관리\n  const [nickName, setNickName] = useState(\"\");\n  const [selectedUser, setSelectedUser] = useState(null); // 선택된 사용자\n\n  useEffect(() => {\n    const initWeb3 = async () => {\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          await window.ethereum.request({ method: \"eth_requestAccounts\" });\n          const accounts = await web3.eth.getAccounts();\n          if (accounts.length > 0) {\n            const account = accounts[0];\n            setAccount(account);\n            const networkId = await web3.eth.net.getId();\n            const deployedNetwork = IdProject.networks[networkId];\n            \n            const instance = new web3.eth.Contract(IdProject.abi, deployedNetwork.address);\n            setContract(instance);\n\n            // 계약에서 직접 데이터 불러오기\n            fetchBlocks(instance, account);\n\n          } else {\n            console.error(\"No accounts found.\");\n          }\n        } catch (error) {\n          console.error(\"Error initializing web3:\", error);\n        }\n      } else {\n        console.error(\"Ethereum object not found. Please install MetaMask.\");\n      }\n    };\n    initWeb3();\n\n    // 새로고침 시 로컬 스토리지에서 blocks 데이터 불러오기\n    const savedBlocks = localStorage.getItem(\"blocks\");\n    if (savedBlocks) {\n      setBlocks(JSON.parse(savedBlocks));\n    }\n  }, []);\n\n\n  // 블록 정보 가져오기 (스마트 계약에서 실시간으로 블록 데이터 불러오기)\n  const fetchBlocks = async(contract, account) => {\n    try{\n      if(contract && account){\n        // blockCount는 Bigint로 반환될 수 있으므로, 이를 Bigint로 처리\n        const blockCount = await contract.methods.blockCount().call();\n        console.log(\"blockCount: \", blockCount); \n\n        if(blockCount === 0n){\n          console.log(\"No blocks available\");\n          return;\n        }\n      }\n    } catch{\n      \n    }\n  }\n\n\n  // blocks 상태 업데이트 시 로컬 스토리지에 저장\n  useEffect(() => {\n    if (blocks.length > 0) {\n      localStorage.setItem(\"blocks\", JSON.stringify(blocks));\n    }\n  }, [blocks]);\n\n  useEffect(() => {\n    // 페이지가 처음 로드될 때 localStorage에서 nickName을 가져옵니다.\n    const storedNickName = localStorage.getItem(\"nickName\");\n    \n    if (storedNickName) {\n      setNickName(storedNickName);\n    } else {\n      // localStorage에 nickName이 없으면 기본값을 사용하거나 사용자에게 설정하게 할 수 있습니다.\n      setNickName(\"\"); // 기본 닉네임 설정\n      localStorage.setItem(\"nickName\", \"\"); // localStorage에 저장\n    }\n  }, []);\n\n  // 정보 가져오기 (블록 리스트 가져오기)\n  const getInfo = async () => {\n    try {\n      if (contract && account) {\n        const blockCount = await contract.methods.blockCount().call();\n        const gotInfos = [];\n        for (let i = 1; i <= blockCount; i++) {\n          const block = await contract.methods.getInfo(account, i).call();\n          gotInfos.push(block);\n        }\n        setBlocks(gotInfos);\n      }\n    } catch (error) {\n      console.error(\"Error getting info:\", error);\n    }\n  };\n\n  return (\n    \n    <div className=\"main-container\">\n    \n      <Header />\n      <h1>Welcome, {nickName}!</h1>\n      {/* 다른 컴포넌트에서 nickName을 사용 */}\n      <Search />\n      <CreateBlock \n        contract={contract} \n        account={account} \n        blocks={blocks}\n        setBlocks={setBlocks} \n        getInfo={getInfo} // getInfo 함수 전달\n      />\n      <History \n        blocks={blocks} // blocks 상태 전달\n      />\n      <ChatBTN />\n      <HelpBTN />\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}