{"ast":null,"code":"var _jsxFileName = \"C:\\\\ljs\\\\project\\\\id\\\\client\\\\src\\\\pages\\\\Stats.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport IdProject from \"../IdProject.json\"; // 스마트 계약 ABI 파일\nimport \"../css/stats.css\";\nimport { History } from \"./History\"; // History 컴포넌트 임포트\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Stats() {\n  _s();\n  const [totalUsers, setTotalUsers] = useState(0);\n  const [totalBlocks, setTotalBlocks] = useState(0);\n  const [recentUsers, setRecentUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(null); // 선택된 유저 닉네임\n  const [userHistory, setUserHistory] = useState([]); // 선택된 유저의 히스토리\n\n  useEffect(() => {\n    const fetchStats = async () => {\n      try {\n        if (!window.ethereum) {\n          console.error(\"MetaMask not detected\");\n          return;\n        }\n        const web3 = new Web3(window.ethereum);\n        await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = IdProject.networks[networkId];\n        if (!deployedNetwork) {\n          console.error(\"Contract not deployed on this network\");\n          return;\n        }\n        const contract = new web3.eth.Contract(IdProject.abi, deployedNetwork.address);\n\n        // 스마트 계약에서 데이터 가져오기\n        const userCount = await contract.methods.getTotalUserCount().call();\n        const blockCount = await contract.methods.getTotalBlockCount().call();\n        const recentUserList = await contract.methods.getRecentUser().call();\n        console.log(\"최근 활동 유저:\", recentUserList);\n        setTotalUsers(Number(userCount));\n        setTotalBlocks(Number(blockCount));\n\n        // 최근 활동 유저 목록 업데이트\n        if (recentUserList.length > 0) {\n          const updatedRecentUsers = recentUserList.map(nickname => ({\n            nickname // 닉네임만 추출\n          }));\n          setRecentUsers(updatedRecentUsers);\n        }\n      } catch (error) {\n        console.error(\"Error fetching stats:\", error);\n      }\n    };\n    fetchStats();\n  }, []);\n\n  // 유저 클릭 시 해당 유저의 히스토리 가져오기\n  const handleUserSelect = async nickname => {\n    try {\n      if (!window.ethereum) {\n        console.error(\"MetaMask not detected\");\n        return;\n      }\n      const web3 = new Web3(window.ethereum);\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = IdProject.networks[networkId];\n      if (!deployedNetwork) {\n        console.error(\"Contract not deployed on this network\");\n        return;\n      }\n      const contract = new web3.eth.Contract(IdProject.abi, deployedNetwork.address);\n      const history = await contract.methods.getUserHistory(nickname).call();\n      console.log(`${nickname}의 히스토리:`, history);\n      setSelectedUser(nickname);\n      setUserHistory(history);\n    } catch (error) {\n      console.error(\"Error fetching user history:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stats-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"total-table\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"stats-title\",\n            children: \"\\uCD1D \\uB204\\uC801 \\uC720\\uC800\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"total-ctn\",\n            children: totalUsers\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"stats-title\",\n            children: \"\\uCD1D \\uB204\\uC801 \\uBE14\\uB85D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"total-ctn\",\n            children: totalBlocks\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uCD5C\\uADFC \\uD65C\\uB3D9 \\uC720\\uC800\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stats-list\",\n        children: recentUsers.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user-list\",\n          children: recentUsers.map((user, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-item\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              onClick: () => handleUserSelect(user.nickname),\n              style: {\n                textDecoration: \"underline\",\n                color: \"yellow\",\n                cursor: \"pointer\"\n              },\n              children: user.nickname\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 19\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this) : \"데이터 없음\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), selectedUser && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"history-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [selectedUser, \"\\uB2D8\\uC758 \\uC811\\uC18D \\uAE30\\uB85D\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(History, {\n        blocks: userHistory\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n_s(Stats, \"9qGdPo9aI0ARI797//jx6tNrNNA=\");\n_c = Stats;\nexport default Stats;\nvar _c;\n$RefreshReg$(_c, \"Stats\");","map":{"version":3,"names":["useEffect","useState","Web3","IdProject","History","jsxDEV","_jsxDEV","Stats","_s","totalUsers","setTotalUsers","totalBlocks","setTotalBlocks","recentUsers","setRecentUsers","selectedUser","setSelectedUser","userHistory","setUserHistory","fetchStats","window","ethereum","console","error","web3","request","method","networkId","eth","net","getId","deployedNetwork","networks","contract","Contract","abi","address","userCount","methods","getTotalUserCount","call","blockCount","getTotalBlockCount","recentUserList","getRecentUser","log","Number","length","updatedRecentUsers","map","nickname","handleUserSelect","history","getUserHistory","className","children","fileName","_jsxFileName","lineNumber","columnNumber","user","index","onClick","style","textDecoration","color","cursor","blocks","_c","$RefreshReg$"],"sources":["C:/ljs/project/id/client/src/pages/Stats.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport IdProject from \"../IdProject.json\"; // 스마트 계약 ABI 파일\r\nimport \"../css/stats.css\";\r\nimport { History } from \"./History\";  // History 컴포넌트 임포트\r\n\r\nexport function Stats() {\r\n  const [totalUsers, setTotalUsers] = useState(0);\r\n  const [totalBlocks, setTotalBlocks] = useState(0);\r\n  const [recentUsers, setRecentUsers] = useState([]);\r\n  const [selectedUser, setSelectedUser] = useState(null); // 선택된 유저 닉네임\r\n  const [userHistory, setUserHistory] = useState([]); // 선택된 유저의 히스토리\r\n\r\n  useEffect(() => {\r\n    const fetchStats = async () => {\r\n      try {\r\n        if (!window.ethereum) {\r\n          console.error(\"MetaMask not detected\");\r\n          return;\r\n        }\r\n\r\n        const web3 = new Web3(window.ethereum);\r\n        await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n        const networkId = await web3.eth.net.getId();\r\n        const deployedNetwork = IdProject.networks[networkId];\r\n        if (!deployedNetwork) {\r\n          console.error(\"Contract not deployed on this network\");\r\n          return;\r\n        }\r\n\r\n        const contract = new web3.eth.Contract(\r\n          IdProject.abi,\r\n          deployedNetwork.address\r\n        );\r\n\r\n        // 스마트 계약에서 데이터 가져오기\r\n        const userCount = await contract.methods.getTotalUserCount().call();\r\n        const blockCount = await contract.methods.getTotalBlockCount().call();\r\n        const recentUserList = await contract.methods.getRecentUser().call();\r\n        console.log(\"최근 활동 유저:\", recentUserList);\r\n\r\n        setTotalUsers(Number(userCount));\r\n        setTotalBlocks(Number(blockCount));\r\n\r\n        // 최근 활동 유저 목록 업데이트\r\n        if (recentUserList.length > 0) {\r\n          const updatedRecentUsers = recentUserList.map((nickname) => ({\r\n            nickname, // 닉네임만 추출\r\n          }));\r\n          setRecentUsers(updatedRecentUsers);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching stats:\", error);\r\n      }\r\n    };\r\n\r\n    fetchStats();\r\n  }, []);\r\n\r\n  // 유저 클릭 시 해당 유저의 히스토리 가져오기\r\n  const handleUserSelect = async (nickname) => {\r\n    try {\r\n      if (!window.ethereum) {\r\n        console.error(\"MetaMask not detected\");\r\n        return;\r\n      }\r\n\r\n      const web3 = new Web3(window.ethereum);\r\n      const networkId = await web3.eth.net.getId();\r\n      const deployedNetwork = IdProject.networks[networkId];\r\n      if (!deployedNetwork) {\r\n        console.error(\"Contract not deployed on this network\");\r\n        return;\r\n      }\r\n\r\n      const contract = new web3.eth.Contract(\r\n        IdProject.abi,\r\n        deployedNetwork.address\r\n      );\r\n\r\n      const history = await contract.methods.getUserHistory(nickname).call();\r\n      console.log(`${nickname}의 히스토리:`, history);\r\n\r\n      setSelectedUser(nickname);\r\n      setUserHistory(history);\r\n    } catch (error) {\r\n      console.error(\"Error fetching user history:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"stats-container\">\r\n      {/* 누적 데이터 */}\r\n      <table className=\"total-table\">\r\n        <tbody>\r\n          <tr>\r\n            <td className=\"stats-title\">총 누적 유저</td>\r\n            <td className=\"total-ctn\">{totalUsers}</td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"stats-title\">총 누적 블록</td>\r\n            <td className=\"total-ctn\">{totalBlocks}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n      {/* 최근 활동 유저 */}\r\n      <div className=\"list-form\">\r\n        <p>최근 활동 유저</p>\r\n        <div className=\"stats-list\">\r\n          {recentUsers.length > 0 ? (\r\n            <div className=\"user-list\">\r\n              {recentUsers.map((user, index) => (\r\n                <div key={index} className=\"user-item\">\r\n                  <span\r\n                    onClick={() => handleUserSelect(user.nickname)}\r\n                    style={{\r\n                      textDecoration: \"underline\",\r\n                      color: \"yellow\",\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                  >\r\n                    {user.nickname}\r\n                  </span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            \"데이터 없음\"\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* 선택한 유저의 히스토리 */}\r\n      {selectedUser && (\r\n        <div className=\"history-section\">\r\n          <h3>{selectedUser}님의 접속 기록</h3>\r\n          <History blocks={userHistory} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Stats;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}