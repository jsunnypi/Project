{"ast":null,"code":"var _jsxFileName = \"C:\\\\ljs\\\\project\\\\id\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport Header from \"./pages/Header\";\nimport Footer from \"./pages/Footer\";\nimport { History } from \"./pages/History\";\nimport { ChatBTN, HelpBTN } from \"./pages/Buttons\";\nimport \"./App.css\";\nimport { Search } from \"./pages/Search\";\nimport IdProject from \"./IdProject.json\";\nimport CreateBlock from \"./pages/CreateBlock\";\nimport Stats from \"./pages/Stats\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [account, setAccount] = useState(\"\");\n  const [contract, setContract] = useState(null);\n  const [blocks, setBlocks] = useState([]); // 블록 상태 관리\n  const [selectedUser, setSelectedUser] = useState(null); // 선택된 사용자\n  const [searchedBlock, setSearchedBlocks] = useState([]); // 검색된 블록\n  const [nickName, setNickName] = useState(\"\");\n  const [userTokenBalance, setUserTokenBalance] = useState(0); // 유저의 토큰 잔액 상태 관리\n  const [tokenBalance, setTokenBalance] = useState(0);\n  const [clickCount, setClickCount] = useState(0); // 클릭 횟수 추적\n  const [transactionInProgress, setTransactionInProgress] = useState(false); // 트랜잭션 진행 여부\n\n  // 메타마스크 및 스마트 계약 초기화\n  useEffect(() => {\n    const initWeb3 = async () => {\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          await window.ethereum.request({\n            method: \"eth_requestAccounts\"\n          });\n          const accounts = await web3.eth.getAccounts();\n          if (accounts.length > 0) {\n            const account = accounts[0];\n            setAccount(account);\n            const networkId = await web3.eth.net.getId();\n            console.log(networkId);\n            const deployedNetwork = IdProject.networks[networkId];\n            console.log(deployedNetwork.address);\n            const instance = new web3.eth.Contract(IdProject.abi, deployedNetwork.address);\n            setContract(instance);\n            fetchBlocks(instance, account); // 계약에서 직접 데이터 불러오기\n            fetchTokenBalance(instance, account); // 사용자 잔액 불러오기\n          } else {\n            console.error(\"MetaMask 계정을 찾을 수 없습니다.\");\n          }\n        } catch (error) {\n          console.error(\"Web3 초기화 중 오류 발생:\", error);\n          alert(\"MetaMask와의 연결에 문제가 발생했습니다. MetaMask가 설치되어 있고, 계정이 연결되었는지 확인해 주세요.\");\n        }\n      } else {\n        console.error(\"Ethereum object not found. Please install MetaMask.\");\n        alert(\"MetaMask가 설치되어 있지 않습니다. MetaMask를 설치해 주세요.\");\n      }\n    };\n    initWeb3();\n\n    // 새로고침 시 로컬 스토리지에서 blocks 데이터 불러오기\n    const savedBlocks = localStorage.getItem(\"blocks\");\n    if (savedBlocks) {\n      setBlocks(JSON.parse(savedBlocks));\n    }\n  }, []);\n\n  // blocks 상태 업데이트 시 로컬 스토리지에 저장\n  useEffect(() => {\n    if (blocks.length > 0) {\n      localStorage.setItem(\"blocks\", JSON.stringify(blocks));\n    }\n  }, [blocks]);\n\n  // 블록 정보 가져오기 (스마트 계약에서 실시간으로 블록 데이터 불러오기)\n  const fetchBlocks = async (contract, account) => {\n    try {\n      if (contract && account) {\n        // blockCount는 BigInt로 반환될 수 있으므로, 이를 BigInt로 처리합니다.\n        const blockCount = await contract.methods.getIndexOf(account).call();\n        if (blockCount.length === 0n) {\n          // blockCount가 BigInt이므로 비교할 때도 BigInt로 비교\n          console.log(\"No blocks available.\");\n          return;\n        }\n        const fetchedBlockResults = [];\n\n        // i는 BigInt로 처리합니다. (1n은 BigInt 값)\n        for (let i = 0; i < blockCount.length; i++) {\n          const block = await contract.methods.getInfo(account, blockCount[i]).call();\n          console.log(`Block ${i}:`, block);\n          fetchedBlockResults.push({\n            // blockId: blockCount[i].toString(), // BigInt를 string으로 변환하여 저장\n            nickName: block[0],\n            gameName: block[1],\n            serverName: block[2],\n            className: block[3],\n            remarks: block[4],\n            date: new Date(Number(block[5]) * 1000).toLocaleString() // 타임스탬프 변환\n          });\n          if (i + 1 === blockCount.length) setNickName(block[0]);\n        }\n        setBlocks(fetchedBlockResults.reverse()); // 블록 상태 업데이트\n      }\n    } catch (error) {\n      console.error(\"블록 정보 불러오기 중 오류 발생:\", error);\n    }\n  };\n\n  // 사용자의 토큰 잔액 가져오기\n  const fetchTokenBalance = async (contract, account) => {\n    try {\n      if (contract && account) {\n        const balance = await contract.methods.getTokenBalance(account).call();\n        setUserTokenBalance(balance);\n      }\n    } catch (error) {\n      console.error(\"사용자 토큰 잔액 조회 중 오류 발생:\", error);\n    }\n  };\n\n  // account나 contract가 변경될 때마다 토큰 잔액을 새로 조회\n  useEffect(() => {\n    if (account && contract) {\n      fetchTokenBalance();\n    }\n  }, [account, contract]);\n\n  // 선택된 사용자 상태 업데이트\n  const handleUserSelect = user => {\n    setSelectedUser(user);\n    fetchSearchedBlocks(user.userAddress);\n  };\n\n  // 사용자가 선택한 블록 정보 가져오기\n  const fetchSearchedBlocks = async account => {\n    try {\n      if (contract && account) {\n        // blockCount는 BigInt로 반환될 수 있으므로, 이를 BigInt로 처리합니다.\n        const blockCount = await contract.methods.getIndexOf(account).call();\n        if (blockCount.length === 0n) {\n          // blockCount가 BigInt이므로 비교할 때도 BigInt로 비교\n          console.log(\"No blocks available.\");\n          return;\n        }\n        const fetchedBlockResults = [];\n\n        // i는 BigInt로 처리합니다. (1n은 BigInt 값)\n        for (let i = 0; i < blockCount.length; i++) {\n          const block = await contract.methods.getInfo(account, blockCount[i]).call();\n          console.log(`Block ${i}:`, block);\n          fetchedBlockResults.push({\n            // blockId: blockCount[i].toString(), // BigInt를 string으로 변환하여 저장\n            nickName: block[0],\n            gameName: block[1],\n            serverName: block[2],\n            className: block[3],\n            remarks: block[4],\n            date: new Date(Number(block[5]) * 1000).toLocaleString() // 타임스탬프 변환\n          });\n        }\n        setSearchedBlocks(fetchedBlockResults.reverse()); // 블록 상태 업데이트\n      }\n    } catch (error) {\n      console.error(\"블록 정보 불러오기 중 오류 발생:\", error);\n    }\n  };\n\n  // 최근 유저 \n  const recentUserSelect = (address, nickName) => {\n    setSelectedUser({\n      address,\n      nickName\n    });\n    fetchSearchedBlocks(address);\n  };\n\n  // 사용자 선택 취소 (검색 화면으로 돌아가기)\n  const handleBackToSearch = () => {\n    setSelectedUser(null);\n  };\n\n  // 채굴 버튼 클릭 시 사용자에게 토큰 전달\n  const handleMine = async () => {\n    // 클릭 횟수 증가\n    setClickCount(prevCount => {\n      const newCount = prevCount + 1;\n      return newCount;\n    });\n\n    // 클릭 횟수가 10번 이상이면 랜덤 효과 처리 및 채굴 시작\n    if (clickCount >= 10 && !transactionInProgress) {\n      setTransactionInProgress(true); // 트랜잭션 진행 중 상태로 설정\n\n      setTimeout(() => {\n        const randomEffect = Math.random();\n\n        // 30% 확률로 채굴 성공 -> 성공 시 채굴 트랜잭션 실행\n        if (randomEffect <= 0.3) {\n          executeMiningTransaction();\n          document.querySelectorAll('.mining-button').forEach(function (element) {\n            element.classList.add('btn-break');\n            setTimeout(() => {\n              document.querySelectorAll('.mining-button').forEach(function (element) {\n                element.classList.remove('btn-break');\n              });\n            }, 5000);\n          });\n        } else {\n          // 실패 시 트랜잭션 창이 뜨지 않음\n          setTransactionInProgress(false); // 트랜잭션 진행 상태를 리셋        \n        }\n      }, 500); // 랜덤 효과 후 500ms 대기\n    }\n  };\n\n  // 실제 채굴 트랜잭션 실행\n  const executeMiningTransaction = async () => {\n    if (contract && account) {\n      try {\n        const gasPrice = Web3.utils.toWei(\"20\", \"gwei\");\n        const receipt = await contract.methods.mine(account, Web3.utils.toWei(\"1000\", \"ether\")).send({\n          from: account,\n          gas: 5000000,\n          gasPrice\n        });\n\n        // 트랜잭션 영수증을 콘솔에 출력\n        console.log(\"트랜잭션 영수증:\", receipt);\n\n        // 토큰 잔액 새로고침\n        fetchTokenBalance(contract, account);\n\n        // 트랜잭션 완료 후 클릭 횟수 초기화 및 상태 업데이트\n        setClickCount(0); // 클릭 횟수 초기화\n        setTransactionInProgress(false); // 트랜잭션 완료 후 상태 리셋\n      } catch (error) {\n        console.error(\"토큰 채굴 중 오류 발생:\", error);\n        alert(\"토큰 채굴에 실패했습니다.\");\n        setTransactionInProgress(false); // 트랜잭션 오류 시 상태 리셋\n      }\n    } else {\n      alert(\"계정을 연결할 수 없습니다.\");\n      setTransactionInProgress(false); // 트랜잭션 오류 시 상태 리셋\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        textAlign: \"center\",\n        margin: 0,\n        padding: 0,\n        marginBottom: \"15px\",\n        marginTop: \"15px\"\n      },\n      children: [\" \", \"Welcome, \", nickName, \"!\", \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        textAlign: \"center\",\n        margin: 0,\n        padding: 0,\n        marginBottom: \"15px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mining-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"mining-button\",\n          onClick: handleMine\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uBCF4\\uC720\\uD55C \\uD1A0\\uD070: \", userTokenBalance, \" WID\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }, this), !selectedUser ?\n    /*#__PURE__*/\n    // 검색 화면\n    _jsxDEV(Search, {\n      contract: contract,\n      onUserSelect: handleUserSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // 선택된 사용자 히스토리 화면\n    _jsxDEV(\"div\", {\n      className: \"user-history\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [selectedUser.nickName, \"\\uB2D8\\uC758 \\uAE30\\uB85D \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleBackToSearch,\n          className: \"back-button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 44\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(History, {\n        blocks: searchedBlock\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 9\n    }, this), !selectedUser && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(CreateBlock, {\n        contract: contract,\n        account: account,\n        blocks: blocks,\n        setBlocks: setBlocks,\n        fetchBlocks: fetchBlocks,\n        tokenBalance: tokenBalance,\n        setTokenBalance: setTokenBalance // 필요 시 토큰 잔액을 업데이트 할 수 있도록\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(History, {\n        blocks: blocks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(Stats, {\n        onSelectUser: recentUserSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatBTN, {\n        nickName: nickName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(HelpBTN, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Lhhw7QN2a11Ugz/rQum1NodY3PA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Web3","Header","Footer","History","ChatBTN","HelpBTN","Search","IdProject","CreateBlock","Stats","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","account","setAccount","contract","setContract","blocks","setBlocks","selectedUser","setSelectedUser","searchedBlock","setSearchedBlocks","nickName","setNickName","userTokenBalance","setUserTokenBalance","tokenBalance","setTokenBalance","clickCount","setClickCount","transactionInProgress","setTransactionInProgress","initWeb3","window","ethereum","web3","request","method","accounts","eth","getAccounts","length","networkId","net","getId","console","log","deployedNetwork","networks","address","instance","Contract","abi","fetchBlocks","fetchTokenBalance","error","alert","savedBlocks","localStorage","getItem","JSON","parse","setItem","stringify","blockCount","methods","getIndexOf","call","fetchedBlockResults","i","block","getInfo","push","gameName","serverName","className","remarks","date","Date","Number","toLocaleString","reverse","balance","getTokenBalance","handleUserSelect","user","fetchSearchedBlocks","userAddress","recentUserSelect","handleBackToSearch","handleMine","prevCount","newCount","setTimeout","randomEffect","Math","random","executeMiningTransaction","document","querySelectorAll","forEach","element","classList","add","remove","gasPrice","utils","toWei","receipt","mine","send","from","gas","children","fileName","_jsxFileName","lineNumber","columnNumber","style","textAlign","margin","padding","marginBottom","marginTop","onClick","onUserSelect","onSelectUser","_c","$RefreshReg$"],"sources":["C:/ljs/project/id/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport Header from \"./pages/Header\";\nimport Footer from \"./pages/Footer\";\nimport { History } from \"./pages/History\";\nimport { ChatBTN, HelpBTN } from \"./pages/Buttons\";\nimport \"./App.css\";\nimport { Search } from \"./pages/Search\";\nimport IdProject from \"./IdProject.json\";\nimport CreateBlock from \"./pages/CreateBlock\";\nimport Stats from \"./pages/Stats\";\n\nconst App = () => {\n  const [account, setAccount] = useState(\"\");\n  const [contract, setContract] = useState(null);\n  const [blocks, setBlocks] = useState([]); // 블록 상태 관리\n  const [selectedUser, setSelectedUser] = useState(null); // 선택된 사용자\n  const [searchedBlock, setSearchedBlocks] = useState([]); // 검색된 블록\n  const [nickName, setNickName] = useState(\"\");\n  const [userTokenBalance, setUserTokenBalance] = useState(0); // 유저의 토큰 잔액 상태 관리\n  const [tokenBalance, setTokenBalance] = useState(0);\n  const [clickCount, setClickCount] = useState(0); // 클릭 횟수 추적\n  const [transactionInProgress, setTransactionInProgress] = useState(false); // 트랜잭션 진행 여부\n \n  // 메타마스크 및 스마트 계약 초기화\n  useEffect(() => {\n    const initWeb3 = async () => {\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          await window.ethereum.request({ method: \"eth_requestAccounts\" });\n          const accounts = await web3.eth.getAccounts();\n          if (accounts.length > 0) {\n            const account = accounts[0];\n            setAccount(account);\n            const networkId = await web3.eth.net.getId();\n            console.log(networkId);\n            const deployedNetwork = IdProject.networks[networkId];\n            console.log(deployedNetwork.address);\n            const instance = new web3.eth.Contract(\n              IdProject.abi,\n              deployedNetwork.address\n            );\n\n            setContract(instance);\n\n            fetchBlocks(instance, account); // 계약에서 직접 데이터 불러오기\n            fetchTokenBalance(instance, account); // 사용자 잔액 불러오기\n          } else {\n            console.error(\"MetaMask 계정을 찾을 수 없습니다.\");\n          }\n        } catch (error) {\n          console.error(\"Web3 초기화 중 오류 발생:\", error);\n          alert(\n            \"MetaMask와의 연결에 문제가 발생했습니다. MetaMask가 설치되어 있고, 계정이 연결되었는지 확인해 주세요.\"\n          );\n        }\n      } else {\n        console.error(\"Ethereum object not found. Please install MetaMask.\");\n        alert(\"MetaMask가 설치되어 있지 않습니다. MetaMask를 설치해 주세요.\");\n      }\n    };\n    initWeb3();\n    \n    // 새로고침 시 로컬 스토리지에서 blocks 데이터 불러오기\n    const savedBlocks = localStorage.getItem(\"blocks\");\n    if (savedBlocks) {\n      setBlocks(JSON.parse(savedBlocks));\n    }\n  }, []);\n\n  // blocks 상태 업데이트 시 로컬 스토리지에 저장\n  useEffect(() => {\n    if (blocks.length > 0) {\n      localStorage.setItem(\"blocks\", JSON.stringify(blocks));\n    }\n  }, [blocks]);\n\n  // 블록 정보 가져오기 (스마트 계약에서 실시간으로 블록 데이터 불러오기)\n  const fetchBlocks = async (contract, account) => {\n    try {\n      if (contract && account) {\n        // blockCount는 BigInt로 반환될 수 있으므로, 이를 BigInt로 처리합니다.\n        const blockCount = await contract.methods.getIndexOf(account).call();\n\n        if (blockCount.length === 0n) {\n          // blockCount가 BigInt이므로 비교할 때도 BigInt로 비교\n          console.log(\"No blocks available.\");\n          return;\n        }\n\n        const fetchedBlockResults = [];\n\n        // i는 BigInt로 처리합니다. (1n은 BigInt 값)\n        for (let i = 0; i < blockCount.length; i++) {\n          const block = await contract.methods\n            .getInfo(account, blockCount[i])\n            .call();\n          console.log(`Block ${i}:`, block);\n\n          fetchedBlockResults.push({\n            // blockId: blockCount[i].toString(), // BigInt를 string으로 변환하여 저장\n            nickName: block[0],\n            gameName: block[1],\n            serverName: block[2],\n            className: block[3],\n            remarks: block[4],\n            date: new Date(Number(block[5]) * 1000).toLocaleString(), // 타임스탬프 변환\n          });\n          if (i + 1 === blockCount.length) setNickName(block[0]);\n        }\n\n        setBlocks(fetchedBlockResults.reverse()); // 블록 상태 업데이트\n      }\n    } catch (error) {\n      console.error(\"블록 정보 불러오기 중 오류 발생:\", error);\n    }\n  };\n\n  \n  // 사용자의 토큰 잔액 가져오기\n  const fetchTokenBalance = async (contract, account) => {\n    try {\n      if (contract && account) {\n        const balance = await contract.methods.getTokenBalance(account).call();\n        setUserTokenBalance(balance);\n      }\n    } catch (error) {\n      console.error(\"사용자 토큰 잔액 조회 중 오류 발생:\", error);\n    }\n  };\n\n  // account나 contract가 변경될 때마다 토큰 잔액을 새로 조회\n  useEffect(() => {\n    if (account && contract) {\n      fetchTokenBalance();\n    }\n  }, [account, contract]);\n\n\n  // 선택된 사용자 상태 업데이트\n  const handleUserSelect = (user) => {\n    setSelectedUser(user);\n    fetchSearchedBlocks(user.userAddress);\n  };\n  \n\n  // 사용자가 선택한 블록 정보 가져오기\n  const fetchSearchedBlocks = async (account) => {\n    try {\n      if (contract && account) {\n        // blockCount는 BigInt로 반환될 수 있으므로, 이를 BigInt로 처리합니다.\n        const blockCount = await contract.methods.getIndexOf(account).call();\n        if (blockCount.length === 0n) {\n          // blockCount가 BigInt이므로 비교할 때도 BigInt로 비교\n          console.log(\"No blocks available.\");\n          return;\n        }\n\n        const fetchedBlockResults = [];\n\n        // i는 BigInt로 처리합니다. (1n은 BigInt 값)\n        for (let i = 0; i < blockCount.length; i++) {\n          const block = await contract.methods\n            .getInfo(account, blockCount[i])\n            .call();\n          console.log(`Block ${i}:`, block);\n\n          fetchedBlockResults.push({\n            // blockId: blockCount[i].toString(), // BigInt를 string으로 변환하여 저장\n            nickName: block[0],\n            gameName: block[1],\n            serverName: block[2],\n            className: block[3],\n            remarks: block[4],\n            date: new Date(Number(block[5]) * 1000).toLocaleString(), // 타임스탬프 변환\n          });\n        }\n\n        setSearchedBlocks(fetchedBlockResults.reverse()); // 블록 상태 업데이트\n      }\n    } catch (error) {\n      console.error(\"블록 정보 불러오기 중 오류 발생:\", error);\n    }\n  };\n\n  // 최근 유저 \n  const recentUserSelect = (address, nickName) => {\n    setSelectedUser({ address, nickName });\n    fetchSearchedBlocks(address);\n  };\n  \n\n  // 사용자 선택 취소 (검색 화면으로 돌아가기)\n  const handleBackToSearch = () => {\n    setSelectedUser(null);\n  };\n\n// 채굴 버튼 클릭 시 사용자에게 토큰 전달\nconst handleMine = async () => {\n  // 클릭 횟수 증가\n  setClickCount((prevCount) => {\n    const newCount = prevCount + 1;\n    return newCount;\n  });\n\n  // 클릭 횟수가 10번 이상이면 랜덤 효과 처리 및 채굴 시작\n  if (clickCount >= 10 && !transactionInProgress) {\n    setTransactionInProgress(true); // 트랜잭션 진행 중 상태로 설정\n\n    setTimeout(() => {\n      const randomEffect = Math.random();\n\n      // 30% 확률로 채굴 성공 -> 성공 시 채굴 트랜잭션 실행\n      if (randomEffect <= 0.3) {\n        executeMiningTransaction();\n          \n        document.querySelectorAll('.mining-button').forEach(function(element) {\n          element.classList.add('btn-break');\n          setTimeout(() => {\n            document.querySelectorAll('.mining-button').forEach(function(element) {\n              element.classList.remove('btn-break');});      \n          },5000)\n      });   \n      } else {\n        // 실패 시 트랜잭션 창이 뜨지 않음\n        setTransactionInProgress(false); // 트랜잭션 진행 상태를 리셋        \n      }\n    }\n    , 500); // 랜덤 효과 후 500ms 대기\n  }\n};\n\n// 실제 채굴 트랜잭션 실행\nconst executeMiningTransaction = async () => {\n  if (contract && account) {\n    try {\n      const gasPrice = Web3.utils.toWei(\"20\", \"gwei\");\n      const receipt = await contract.methods\n        .mine(account, Web3.utils.toWei(\"1000\", \"ether\"))\n        .send({ from: account, gas: 5000000, gasPrice });\n\n      // 트랜잭션 영수증을 콘솔에 출력\n      console.log(\"트랜잭션 영수증:\", receipt);\n\n      // 토큰 잔액 새로고침\n      fetchTokenBalance(contract, account);\n\n      // 트랜잭션 완료 후 클릭 횟수 초기화 및 상태 업데이트\n      setClickCount(0); // 클릭 횟수 초기화\n      setTransactionInProgress(false); // 트랜잭션 완료 후 상태 리셋\n    } catch (error) {\n      console.error(\"토큰 채굴 중 오류 발생:\", error);\n      alert(\"토큰 채굴에 실패했습니다.\");\n      setTransactionInProgress(false); // 트랜잭션 오류 시 상태 리셋\n    }\n  } else {\n    alert(\"계정을 연결할 수 없습니다.\");\n    setTransactionInProgress(false); // 트랜잭션 오류 시 상태 리셋\n  }\n};\n\n  return (\n    <div className=\"main-container\">\n      <Header />\n      <h1\n        style={{\n          textAlign: \"center\",\n          margin: 0,\n          padding: 0,\n          marginBottom: \"15px\",\n          marginTop: \"15px\",\n        }}\n      >\n        {\" \"}\n        Welcome, {nickName}!{\" \"}\n      </h1>\n      \n      <h3\n        style={{\n          textAlign: \"center\",\n          margin: 0,\n          padding: 0,\n          marginBottom: \"15px\",\n        }}\n      >\n        {/* 채굴 버튼 및 사용자 토큰 잔액 */}\n        <div className=\"mining-section\">\n          <button\n            className=\"mining-button\"\n            onClick={handleMine}\n          >\n          </button>\n          <p>보유한 토큰: {userTokenBalance} WID</p>\n        </div>\n      </h3>\n      \n      {!selectedUser ? (\n        // 검색 화면\n        <Search contract={contract} onUserSelect={handleUserSelect} />\n      ) : (\n        // 선택된 사용자 히스토리 화면\n        <div className=\"user-history\">\n          <h2>{selectedUser.nickName}님의 기록 <button onClick={handleBackToSearch} className=\"back-button\"></button></h2>\n          <History blocks={searchedBlock} />\n        </div>\n      )}\n      {!selectedUser && (\n        <>\n          {/* 블록 생성 및 전체 블록 히스토리 */}\n          <CreateBlock\n            contract={contract}\n            account={account}\n            blocks={blocks}\n            setBlocks={setBlocks}\n            fetchBlocks={fetchBlocks}\n            tokenBalance={tokenBalance} \n            setTokenBalance={setTokenBalance} // 필요 시 토큰 잔액을 업데이트 할 수 있도록\n          />\n          <History blocks={blocks} />\n        </>\n      )}\n      <Footer />\n      <div className=\"button-container\">\n        \n        <Stats onSelectUser={recentUserSelect} />\n          \n        <ChatBTN nickName={nickName} />\n        <HelpBTN />\n        \n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}